---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import Card from '../components/Card.astro';
import { auth, db } from '../lib/firebase';
import { collection, query, where, getDocs, orderBy, doc, deleteDoc, updateDoc, onSnapshot } from 'firebase/firestore';
import { onAuthStateChanged } from 'firebase/auth';

let userSubmissions: any[] = [];
let filteredSubmissions: any[] = [];
let currentFilter = 'all';
let currentSort: 'newest' | 'oldest' | 'name' = 'newest';

onAuthStateChanged(auth, async (user) => {
  try {
    // Clear state when logged out
    if (!user) {
      userSubmissions = [];
      filteredSubmissions = [];
      try { (window as any).__userSubmissions = userSubmissions; } catch {}
      // Ensure UI reflects empty state on logout
      try { (window as any).__applyFilters?.(); (window as any).__renderCards?.(); } catch {}
      return;
    }
    // Query requires an indexable order field; ensure createdAt exists on docs
    const qRef = query(
      collection(db, "submissions"),
      where("userId", "==", user.uid),
      orderBy("createdAt", "desc")
    );
    // Initial fetch (first paint)
    const querySnapshot = await getDocs(qRef);
    const items: any[] = [];
    querySnapshot.forEach((d) => {
      items.push({ id: d.id, ...d.data() });
    });
    userSubmissions = items;
    filteredSubmissions = [...userSubmissions];
    try { (window as any).__userSubmissions = userSubmissions; } catch {}
    try { (window as any).__applyFilters?.(); (window as any).__renderCards?.(); } catch {}

    // Real-time subscription
    onSnapshot(qRef, (snap) => {
      const live: any[] = [];
      snap.forEach((d) => live.push({ id: d.id, ...d.data() }));
      userSubmissions = live;
      try { (window as any).__userSubmissions = userSubmissions; } catch {}
      try { (window as any).__applyFilters?.(); (window as any).__renderCards?.(); } catch {}
    }, (err) => {
      console.error('Realtime subscription error', err);
    });
  } catch (e: any) {
    // If missing index or invalid order/filter combination, surface hint
    console.error('Failed to load submissions', e);
    userSubmissions = [];
    filteredSubmissions = [];
    try { (window as any).__userSubmissions = userSubmissions; } catch {}
    try { (window as any).__applyFilters?.(); (window as any).__renderCards?.(); } catch {}
  }
});
---

<Layout title="Dashboard - Leak Media">
  <Navigation />
  <main class="main-content">
    <div class="container">
      <div class="dashboard-header">
        <h1 class="page-title">Dashboard</h1>
        <p class="page-subtitle">Manage your submitted resources</p>
      </div>
      
      <div class="dashboard-controls max-w-4xl mx-auto">
        <div class="controls-grid">
          <div class="filter-section">
            <h2 class="control-title">
              <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
              </svg>
              Filter by Category
            </h2>
            <div class="filter-buttons">
              <button class="filter-btn ubuntu" data-filter="all">
                <span>All</span>
                <span class="count">({userSubmissions.length})</span>
              </button>
              <button class="filter-btn ubuntu" data-filter="software">
                <span>Software</span>
                <span class="count">({userSubmissions.filter(s => s.category === 'software').length})</span>
              </button>
              <button class="filter-btn ubuntu" data-filter="plugin">
                <span>Plugins</span>
                <span class="count">({userSubmissions.filter(s => s.category === 'plugin').length})</span>
              </button>
              <button class="filter-btn ubuntu" data-filter="script">
                <span>Scripts</span>
                <span class="count">({userSubmissions.filter(s => s.category === 'script').length})</span>
              </button>
            </div>
          </div>
          
          <div class="sort-section">
            <h2 class="control-title">
              <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12"/>
              </svg>
              Sort by
            </h2>
            <select class="sort-select">
              <option value="newest">Newest</option>
              <option value="oldest">Oldest</option>
              <option value="name">Name (A-Z)</option>
            </select>
          </div>

          <!-- Stats moved under sections, full-width row; theme-aligned -->
          <div class="stats-section">
            <div class="stats-header">
              <h2 class="control-title stats-title ubuntu">
                <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h18M3 10h18M3 17h18"/>
                </svg>
                Stats
              </h2>
            </div>
            <div class="stats-row">
              <div class="stat-pill">
                <div class="dot" style="background: rgb(var(--primary-500));"></div>
                <span class="label">Total</span>
                <span class="value">{userSubmissions.length}</span>
              </div>
              <div class="stat-pill">
                <div class="dot" style="background: rgb(34 197 94);"></div>
                <span class="label">Approved</span>
                <span class="value">{userSubmissions.filter(s => s.approved).length}</span>
              </div>
              <div class="stat-pill">
                <div class="dot" style="background: rgb(234 179 8);"></div>
                <span class="label">Pending</span>
                <span class="value">{userSubmissions.filter(s => !s.approved).length}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="cards-grid" id="cards-grid">
        {filteredSubmissions.map(card => (
          <Card {...card} showActions={true} />
        ))}
      </div>

      <div id="empty-state" class="empty-state" style={`display: ${filteredSubmissions.length === 0 ? 'block' : 'none'}`}>
        <div class="empty-icon">
          <svg class="w-16 h-16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"/>
          </svg>
        </div>
        <h3>No submissions found</h3>
        <p>You haven't submitted any resources yet.</p>
        <a href="/submit" class="btn-primary">
          <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
          </svg>
          Submit a Resource
        </a>
      </div>
    </div>
  </main>
</Layout>

<style>
  .main-content {
    @apply pt-24 pb-20;
  }

  .container {
    @apply max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;
  }

  .dashboard-header {
    @apply text-center mb-10;
  }

  .page-title {
    @apply text-4xl font-bold mb-2 tracking-tight;
    color: rgb(var(--primary-400));
    text-shadow: 0 0 24px rgba(var(--primary-500) / 0.18);
  }

  .page-subtitle {
    @apply text-dark-400 text-base;
  }

  .dashboard-controls {
    @apply bg-dark-950/80 backdrop-blur-md border border-dark-800/60 rounded-2xl p-5 mb-8;
    box-shadow: 0 10px 30px rgba(0,0,0,.5), inset 0 1px 0 rgba(255,255,255,.02);
  }
  @media (min-width: 1024px) {
    .dashboard-controls { max-width: 56rem; } /* lg ~ 896px */
  }
  @media (min-width: 1280px) {
    .dashboard-controls { max-width: 52rem; } /* xl ~ 832px for a tighter look */
  }
  .controls-grid {
    @apply grid gap-5;
    grid-template-columns: 1fr;
  }
  @media (min-width: 768px) {
    .controls-grid {
      grid-template-columns: 1.2fr 0.8fr; /* filter | sort */
      align-items: end;
      column-gap: 1.25rem;
    }
  }

  /* Stats section: heading aligned on top, pills below */
  .stats-section {
    @apply mt-4;
  }

  .stats-header {
    @apply flex items-center justify-between;
  }

  .stats-row {
    @apply mt-3 pt-3 flex flex-wrap items-center gap-3 border-t;
    border-color: rgba(var(--primary-600) / 0.15);
  }
  .stat-pill {
    @apply flex items-center gap-2 bg-dark-800/60 rounded-lg px-3 py-2 border;
    border-color: rgba(148,163,184,0.12);
  }
  .stat-pill .dot {
    @apply w-2.5 h-2.5 rounded-full;
  }
  .stat-pill .label {
    @apply text-xs text-dark-300;
  }
  .stat-pill .value {
    @apply text-sm font-semibold text-white;
  }

  .control-title {
    @apply text-sm font-semibold text-dark-300 mb-2 flex items-center uppercase tracking-wider;
    position: relative;
  }
  .control-title svg { flex-shrink: 0; }
  .stats-title {
    @apply mt-2 text-primary-300;
  }
  .ubuntu {
    font-family: 'Ubuntu', 'Noto Sans', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  }
  .stats-title::after {
    content: '';
    @apply block mt-2 h-px;
    background: linear-gradient(90deg, rgba(var(--primary-600) / 0.35), transparent);
  }

  .filter-section, .sort-section {
    @apply mb-6;
  }
  .filter-section .filter-buttons {
    @apply flex flex-wrap items-center gap-2.5;
  }

  .filter-section:last-child, .sort-section:last-child {
    @apply mb-0;
  }

  .filter-buttons {
    @apply flex flex-wrap gap-2.5;
  }

  .filter-btn {
    @apply px-3.5 py-2 bg-dark-800/60 text-dark-300 rounded-lg transition-all duration-200 flex items-center gap-2;
    border: 1px solid rgba(148,163,184,0.12);
    line-height: 1;
  }

  .filter-btn:hover {
    @apply bg-dark-700/60 text-white;
    border-color: rgba(var(--primary-600) / 0.35);
  }

  .filter-btn.active {
    @apply bg-dark-800/70 text-primary-300;
    border-color: rgba(var(--primary-600) / 0.6);
    box-shadow: 0 0 0 3px rgba(var(--primary-600) / 0.15);
  }

  .filter-btn .count {
    @apply text-xs opacity-70;
  }

  .sort-select {
    @apply bg-dark-800/60 text-white border border-dark-600/70 rounded-lg px-4 py-2.5 focus:outline-none focus:ring-2 focus:ring-primary-600/40 transition-all duration-200;
    height: 2.75rem;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.7rem center;
    background-size: 1.25em 1.25em;
    padding-right: 2.25rem;
  }

  /* Stats moved inline; remove old block spacing if any instance remains */
  .dashboard-stats {
    display: none;
  }

  .stat-card {
    @apply bg-dark-950/80 backdrop-blur-md border border-dark-800/60 rounded-2xl p-5 text-center transition-all duration-300;
    box-shadow: 0 10px 30px rgba(0,0,0,.5), inset 0 1px 0 rgba(255,255,255,.02);
  }

  .stat-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 14px 34px rgba(0,0,0,.45);
  }

  .stat-card.approved {
    border-color: rgba(34, 197, 94, 0.3);
  }

  .stat-card.pending {
    border-color: rgba(251, 191, 36, 0.3);
  }

  .stat-icon {
    @apply w-12 h-12 mx-auto mb-4 rounded-full bg-dark-800/60 flex items-center justify-center;
    border: 1px solid rgba(148,163,184,0.12);
  }

  .stat-card.approved .stat-icon {
    @apply bg-green-500/10;
  }

  .stat-card.pending .stat-icon {
    @apply bg-yellow-500/10;
  }

  .stat-content {
    @apply flex flex-col items-center;
  }

  .stat-number {
    @apply text-3xl font-bold mb-1 tracking-tight text-white;
  }

  .stat-card:not(.approved):not(.pending) .stat-number {
    color: rgb(var(--primary-400));
    text-shadow: 0 0 18px rgba(var(--primary-500) / 0.18);
  }

  .stat-card.approved .stat-number {
    @apply text-green-400;
  }

  .stat-card.pending .stat-number {
    @apply text-yellow-400;
  }

  .stat-label {
    @apply text-dark-400 text-sm;
  }

  .cards-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5;
  }

  .empty-state {
    @apply text-center py-16;
  }

  .empty-icon {
    @apply w-24 h-24 mx-auto mb-6 rounded-full bg-dark-700/30 flex items-center justify-center;
    border: 2px solid rgb(var(--primary-600)); /* theme-driven ring */
  }

  .empty-state h3 {
    @apply text-2xl font-semibold mb-3 text-primary-400; /* theme-driven heading */
  }

  .empty-state p {
    @apply text-dark-400 mb-8 max-w-md mx-auto;
  }

  .btn-primary {
    @apply inline-flex items-center px-6 py-3 bg-primary-600 text-white font-medium rounded-xl transition-all duration-200;
    box-shadow: 0 8px 24px rgba(var(--primary-600) / 0.18);
  }
</style>

<script>
  import { db } from '../lib/firebase';
  import { doc, deleteDoc, updateDoc } from 'firebase/firestore';

  // Declare the globals so TS recognizes them inside this client script scope
  // They are set in the frontmatter loader and mutated here on the client.
  let userSubmissions: any[] = (typeof window !== 'undefined' && (window as any).__userSubmissions) || [];
  let filteredSubmissions: any[] = (typeof window !== 'undefined' && (window as any).__filteredSubmissions) || [];
  let currentFilter: string = (typeof window !== 'undefined' && (window as any).__currentFilter) || 'all';
  let currentSort: 'newest' | 'oldest' | 'name' = (typeof window !== 'undefined' && (window as any).__currentSort) || 'newest';

  // Sync initial values from SSR context if available
  try {
    (window as any).__userSubmissions = userSubmissions;
    (window as any).__filteredSubmissions = filteredSubmissions;
    (window as any).__currentFilter = currentFilter;
    (window as any).__currentSort = currentSort;
  } catch {}

  // Safe helpers
  const $$ = (sel: string, root: Document | HTMLElement = document) => Array.from(root.querySelectorAll(sel)) as HTMLElement[];
  const $ = (sel: string, root: Document | HTMLElement = document) => root.querySelector(sel) as HTMLElement | null;

  // Filter buttons
  $$('.filter-btn').forEach((btn) => {
    btn.addEventListener('click', () => {
      const filter = (btn.dataset.filter || 'all') as string;
      currentFilter = filter;
      try { (window as any).__currentFilter = currentFilter; } catch {}
      $$('.filter-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      applyFilters();
      renderCards();
    });
  });

  // Sort select
  const sortSelect = document.querySelector('.sort-select') as HTMLSelectElement | null;
  if (sortSelect) {
    sortSelect.addEventListener('change', () => {
      const v = sortSelect.value as 'newest' | 'oldest' | 'name';
      currentSort = v;
      try { (window as any).__currentSort = currentSort; } catch {}
      applyFilters();
      renderCards();
    });
  }

  function applyFilters() {
    filteredSubmissions = Array.isArray(userSubmissions) ? [...userSubmissions] : [];
  
    if (currentFilter !== 'all') {
      filteredSubmissions = filteredSubmissions.filter((card: any) => card?.category === currentFilter);
    }
  
    if (currentSort === 'newest') {
      filteredSubmissions.sort((a: any, b: any) =>
        new Date(b?.createdAt?.toDate?.() ? b.createdAt.toDate() : b?.createdAt || 0).getTime() -
        new Date(a?.createdAt?.toDate?.() ? a.createdAt.toDate() : a?.createdAt || 0).getTime()
      );
    } else if (currentSort === 'oldest') {
      filteredSubmissions.sort((a: any, b: any) =>
        new Date(a?.createdAt?.toDate?.() ? a.createdAt.toDate() : a?.createdAt || 0).getTime() -
        new Date(b?.createdAt?.toDate?.() ? b.createdAt.toDate() : b?.createdAt || 0).getTime()
      );
    } else if (currentSort === 'name') {
      filteredSubmissions.sort((a: any, b: any) => (a?.name || '').localeCompare(b?.name || ''));
    }
  
    try {
      (window as any).__filteredSubmissions = filteredSubmissions;
    } catch {}
  }
  
  // Render lightweight UI counters so “cards-grid” stays SSR but numbers reflect realtime
  function renderCards() {
    // Guard if DOM not ready
    if (typeof document === 'undefined') return;
    // Update counts in Filter buttons
    const countAll = document.querySelector('.filter-btn[data-filter="all"] .count');
    const countSoftware = document.querySelector('.filter-btn[data-filter="software"] .count');
    const countPlugin = document.querySelector('.filter-btn[data-filter="plugin"] .count');
    const countScript = document.querySelector('.filter-btn[data-filter="script"] .count');
  
    const all = Array.isArray(userSubmissions) ? userSubmissions.length : 0;
    const software = Array.isArray(userSubmissions) ? userSubmissions.filter((s: any) => s?.category === 'software').length : 0;
    const plugin = Array.isArray(userSubmissions) ? userSubmissions.filter((s: any) => s?.category === 'plugin').length : 0;
    const script = Array.isArray(userSubmissions) ? userSubmissions.filter((s: any) => s?.category === 'script').length : 0;
  
    if (countAll) countAll.textContent = `(${all})`;
    if (countSoftware) countSoftware.textContent = `(${software})`;
    if (countPlugin) countPlugin.textContent = `(${plugin})`;
    if (countScript) countScript.textContent = `(${script})`;
  
    // Update stats pills
    const totalEl = document.querySelector('.stat-pill .value');
    if (totalEl) totalEl.textContent = String(all);
    const approvedEl = document.querySelectorAll('.stat-pill .value')[1] as HTMLElement | undefined;
    if (approvedEl) approvedEl.textContent = String((userSubmissions || []).filter((s: any) => s?.approved).length);
    const pendingEl = document.querySelectorAll('.stat-pill .value')[2] as HTMLElement | undefined;
    if (pendingEl) pendingEl.textContent = String((userSubmissions || []).filter((s: any) => !s?.approved).length);

    // Toggle empty state
    const empty = document.getElementById('empty-state');
    const grid = document.getElementById('cards-grid');
    if (empty) empty.style.display = all === 0 ? 'block' : 'none';
    if (grid) grid.style.display = all === 0 ? 'none' : 'grid';

    // Live rebuild of cards DOM to reflect realtime changes
    const gridEl = document.getElementById('cards-grid');
    if (gridEl) {
      // Only rebuild when not empty to avoid flicker
      if (all > 0) {
        // Keep it simple: rebuild a minimal card view directly in DOM
        // This avoids Astro re-hydration while letting users see latest data.
        gridEl.innerHTML = '';
        const list = (filteredSubmissions && Array.isArray(filteredSubmissions)) ? filteredSubmissions : [];
        for (const c of list) {
          const a = document.createElement('a');
          a.className = 'card-link-wrapper';
          a.href = String(c.link || '#');
          a.target = '_blank';
          a.rel = 'noopener noreferrer';

          const wrap = document.createElement('div');
          wrap.className = 'rt-card';

          const header = document.createElement('div');
          header.className = 'rt-card-header';
          const title = document.createElement('h3');
          title.className = 'rt-card-title';
          title.textContent = String(c.name || 'Untitled');
          header.appendChild(title);

          const badge = document.createElement('span');
          badge.className = 'rt-badge';
          badge.textContent = String(c.category || 'unknown');
          header.appendChild(badge);

          const desc = document.createElement('p');
          desc.className = 'rt-card-desc';
          desc.textContent = String(c.description || '');

          // Actions (Edit/Delete) to keep management in sync
          const actions = document.createElement('div');
          actions.className = 'rt-actions';
          const edit = document.createElement('button');
          edit.className = 'btn-ghost btn-edit';
          edit.dataset.id = String(c.id || '');
          edit.textContent = 'Edit';
          const del = document.createElement('button');
          del.className = 'btn-ghost btn-delete text-red-400 hover:text-red-300';
          del.dataset.id = String(c.id || '');
          del.textContent = 'Delete';
          actions.appendChild(edit);
          actions.appendChild(del);

          wrap.appendChild(header);
          wrap.appendChild(desc);
          wrap.appendChild(actions);
          a.appendChild(wrap);
          gridEl.appendChild(a);
        }
      }
    }
  }
  
  // Expose for server onSnapshot callback
  try {
    (window as any).__applyFilters = applyFilters;
    (window as any).__renderCards = renderCards;
  } catch {}

  // Edit/Delete: delegate with strict guards
  document.addEventListener('click', async (e) => {
    const target = e.target as HTMLElement | null;
    if (!target) return;

    // Delete
    if (target.matches('.btn-delete')) {
      const id = target.dataset.id || '';
      if (!id) return;
      try {
        if (confirm('Are you sure you want to delete this submission?')) {
          await deleteDoc(doc(db, 'submissions', id));
          // Optimistic local update
          userSubmissions = (userSubmissions || []).filter((c: any) => c?.id !== id);
          try { (window as any).__userSubmissions = userSubmissions; } catch {}
          applyFilters();
          // Simple refresh for now to sync UI fully
          window.location.reload();
        }
      } catch (err) {
        console.error('Delete failed', err);
      }
      return;
    }

    // Edit
    if (target.matches('.btn-edit')) {
      const id = target.dataset.id || '';
      if (!id) return;
      const card = (userSubmissions || []).find((c: any) => c?.id === id);
      if (!card) return;

      const modal = document.createElement('div');
      modal.className = 'modal-overlay';
      modal.innerHTML = `
        <div class="modal-content">
          <div class="modal-header">
            <h2>Edit Submission</h2>
            <button class="close-modal">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
            </button>
          </div>
          <form id="edit-form">
            <div class="form-group">
              <label>Name *</label>
              <input type="text" name="name" value="${card.name || ''}" required>
            </div>
            <div class="form-group">
              <label>Category *</label>
              <select name="category" required>
                <option value="software" ${card.category === 'software' ? 'selected' : ''}>Software</option>
                <option value="plugin" ${card.category === 'plugin' ? 'selected' : ''}>Plugin</option>
                <option value="script" ${card.category === 'script' ? 'selected' : ''}>Script</option>
              </select>
            </div>
            <div class="form-group">
              <label>Description *</label>
              <textarea name="description" required rows="3">${card.description || ''}</textarea>
            </div>
            <div class="form-group">
              <label>Icon URL (optional)</label>
              <input type="url" name="icon" value="${card.icon || ''}">
            </div>
            <div class="form-group">
              <label>Resource Link *</label>
              <input type="url" name="link" value="${card.link || ''}" required>
            </div>
            <div class="form-actions">
              <button type="submit" class="btn-primary">Save Changes</button>
              <button type="button" class="btn-secondary close-modal">Cancel</button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);

      const closeBtn = modal.querySelector('.close-modal') as HTMLElement | null;
      closeBtn?.addEventListener('click', () => modal.remove());

      modal.addEventListener('click', (ev) => {
        if (ev.target === modal) modal.remove();
      });

      const form = modal.querySelector('#edit-form') as HTMLFormElement | null;
      form?.addEventListener('submit', async (ev) => {
        ev.preventDefault();
        try {
          const formData = new FormData(form as HTMLFormElement);
          const updatedData = {
            name: String(formData.get('name') || ''),
            category: String(formData.get('category') || ''),
            description: String(formData.get('description') || ''),
            icon: String(formData.get('icon') || ''),
            link: String(formData.get('link') || '')
          };
          await updateDoc(doc(db, 'submissions', id), updatedData);
          window.location.reload();
        } catch (err) {
          console.error('Update failed', err);
        }
      });
    }
  });
</script>

<style>
  .modal-overlay {
    @apply fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50;
  }

  .modal-content {
    @apply bg-dark-900 border border-dark-700 rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl;
    animation: modalFadeIn 0.3s ease-out;
  }

  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .modal-header {
    @apply flex items-center justify-between mb-6;
  }

  .modal-header h2 {
    @apply text-xl font-semibold text-white;
  }

  .modal-header .close-modal {
    @apply p-2 rounded-lg transition-colors duration-200;
  }

  .form-group {
    @apply mb-5;
  }

  .form-group label {
    @apply block text-dark-300 mb-2 text-sm font-medium;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    @apply w-full bg-dark-700/50 border border-dark-600 rounded-xl px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-primary-500 transition-all duration-300;
  }

  .form-group textarea {
    resize: vertical;
    min-height: 100px;
  }

  .form-actions {
    @apply flex gap-3 justify-end mt-8;
  }

  .btn-secondary {
    @apply px-5 py-2.5 bg-dark-700 text-dark-300 rounded-xl transition-all duration-300;
  }
</style>

<style>
  /* Minimal styles for realtime cards so they match theme without altering Card component */
  .card-link-wrapper { text-decoration: none; }
  .rt-card {
    border-radius: 0.75rem; /* rounded-xl */
    padding: 1.25rem; /* p-5 */
    background: rgba(2, 6, 12, 0.8); /* ~ bg-dark-950/80 */
    border: 1px solid rgba(30, 41, 59, 0.6); /* ~ border-dark-800/60 */
    transition: box-shadow 200ms ease, transform 200ms ease;
  }
  .rt-card:hover {
    box-shadow: 0 10px 30px rgba(0,0,0,.45);
    transform: translateY(-2px);
  }
  .rt-card-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.25rem;
  }
  .rt-card-title {
    color: #fff;
    font-weight: 600;
    font-size: 1.125rem; /* text-lg */
    margin: 0;
  }
  .rt-badge {
    font-size: 0.75rem;
    padding: 0.125rem 0.5rem;
    border-radius: 9999px;
    border: 1px solid rgba(148,163,184,0.3);
    color: rgb(226 232 240); /* slate-200 */
    background: rgba(15, 23, 42, 0.4); /* dark badge */
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  .rt-card-desc {
    color: rgb(203 213 225); /* slate-300 */
    font-size: 0.875rem;
    line-height: 1.5;
    margin: 0.5rem 0 0.75rem 0;
  }
  .rt-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.25rem;
  }
</style>
