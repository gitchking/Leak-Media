---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import Card from '../components/Card.astro';

// Fetch cards from API
let cards = [];
try {
  const response = await fetch(`${Astro.url.origin}/api/cards`);
  if (response.ok) {
    cards = await response.json();
  }
} catch (error) {
  console.error('Failed to fetch cards:', error);
  // Fallback data
  cards = [
    {
      id: '1',
      name: 'Visual Studio Code',
      description: 'A powerful, lightweight code editor with extensive extension support and integrated terminal.',
      icon: 'https://code.visualstudio.com/assets/images/code-stable.png',
      link: 'https://code.visualstudio.com',
      category: 'software'
    },
    {
      id: '2',
      name: 'Prettier',
      description: 'An opinionated code formatter that supports many languages and integrates with most editors.',
      icon: 'https://prettier.io/icon.png',
      link: 'https://prettier.io',
      category: 'plugin'
    },
    {
      id: '3',
      name: 'Auto Deploy Script',
      description: 'Automated deployment script for static sites with built-in optimization and error handling.',
      link: 'https://github.com/example/deploy-script',
      category: 'script'
    }
  ];
}
---

<Layout title="Leak Media - Premium Developer Resources">
  <Navigation />
  
  <main class="main-content">
    <div class="container">


      <section class="cards-section">
        <div class="section-header">
        <h2 class="section-title footer-font">Featured</h2>
          <div class="filter-tabs">
            <button class="filter-tab footer-font active" data-filter="all">All</button>
            <button class="filter-tab footer-font" data-filter="software">Software</button>
            <button class="filter-tab footer-font" data-filter="plugin">Plugins</button>
            <button class="filter-tab footer-font" data-filter="script">Scripts</button>
          </div>
        </div>
        
        <div class="cards-grid">
          {cards.map(card => (
            <Card {...card} />
          ))}
        </div>
      </section>
    </div>
  </main>
</Layout>

<style>
  .main-content {
    @apply pt-24 pb-20;
  }

  .container {
    @apply max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;
  }

  .hero-section {
    @apply py-20 text-center;
  }

  .hero-content {
    @apply max-w-4xl mx-auto;
  }

  .hero-title {
    @apply text-5xl md:text-6xl font-bold mb-6 leading-tight;
  }

  .gradient-text {
    @apply bg-gradient-to-r from-primary-400 to-primary-600 bg-clip-text text-transparent;
  }

  .hero-description {
    @apply text-xl text-gray-300 mb-12 leading-relaxed max-w-2xl mx-auto;
  }

  .submission-section {
    @apply mb-16;
  }

  .cards-section {
    @apply space-y-8;
  }

  .section-header {
    @apply flex items-center justify-between flex-wrap gap-4;
  }

  .section-title {
    @apply text-3xl font-bold text-white;
  }
  /* Reuse the same font as footer text (Inter fallback stack is already used globally).
     If footer uses a custom class, mirror it here. */
  .footer-font {
    font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", sans-serif;
    letter-spacing: -0.01em;
    font-weight: 700;
  }

  .filter-tabs {
    @apply flex gap-2;
  }

  .filter-tab {
    @apply px-4 py-2 text-base font-semibold rounded-lg transition-all duration-200;
    @apply text-gray-400 hover:text-white hover:bg-dark-800;
  }

  .filter-tab.active {
    @apply bg-primary-600 text-white;
  }

  .cards-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6;
  }

  @media (max-width: 768px) {
    .hero-title {
      @apply text-4xl;
    }
    
    .section-header {
      @apply flex-col items-start;
    }
  }
</style>

<script>
  // Filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterTabs = document.querySelectorAll('.filter-tab');
    const cards = document.querySelectorAll('.card-container');

    filterTabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const filter = tab.getAttribute('data-filter');
        
        // Update active tab
        filterTabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        
        // Filter cards
        cards.forEach(card => {
          const category = card.querySelector('.category-badge')?.getAttribute('data-category');
          if (filter === 'all' || category === filter) {
            (card as HTMLElement).style.display = 'block';
          } else {
            (card as HTMLElement).style.display = 'none';
          }
        });
      });
    });
  });
</script>
